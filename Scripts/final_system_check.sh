#!/bin/bash

# ==============================================================================
# FINAL SYSTEM CHECK - Verificaci√≥n final antes de la instalaci√≥n real
# ==============================================================================

set -euo pipefail

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Colors
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly RED='\033[0;31m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m'

log() { echo -e "${BLUE}[CHECK]${NC} $*"; }
success() { echo -e "${GREEN}[‚úì]${NC} $*"; }
warning() { echo -e "${YELLOW}[!]${NC} $*"; }
error() { echo -e "${RED}[‚úó]${NC} $*"; }

show_banner() {
    cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                     ‚úÖ FINAL SYSTEM CHECK                           ‚ïë
‚ïë                Verificaci√≥n final antes de instalar                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo
}

check_all_scripts() {
    log "üîç Verificando scripts principales..."
    
    local scripts=(
        "full_installer_v2.sh:Instalador principal"
        "system_diagnostic.sh:Sistema diagn√≥stico"
        "json_manager.sh:Gestor JSON"
        "stow-links.sh:Enlaces simb√≥licos"
        "install_extra_packs.sh:Paquetes extra"
    )
    
    local all_good=true
    
    for script_info in "${scripts[@]}"; do
        local script="${script_info%%:*}"
        local desc="${script_info#*:}"
        
        if [[ -f "$script" ]]; then
            if [[ -x "$script" ]]; then
                success "$script - $desc"
            else
                warning "$script existe pero no es ejecutable"
                chmod +x "$script"
                success "$script - permisos corregidos"
            fi
        else
            error "$script no encontrado"
            all_good=false
        fi
    done
    
    echo
    return $all_good
}

check_json_integrity() {
    log "üìÑ Verificando integridad del JSON..."
    
    if [[ ! -f "packages.json" ]]; then
        error "packages.json no encontrado"
        return 1
    fi
    
    # Verificar sintaxis b√°sica
    if ! jq empty packages.json 2>/dev/null; then
        error "JSON con sintaxis inv√°lida"
        return 1
    fi
    
    # Contar elementos
    local categories=$(jq '.categories | length' packages.json)
    local total_packages=$(jq '[.categories[].packages | length] | add' packages.json)
    local pacman_packages=$(jq '[.categories[].packages[] | select(.repo == "pacman")] | length' packages.json)
    local aur_packages=$(jq '[.categories[].packages[] | select(.repo == "aur")] | length' packages.json)
    
    success "JSON v√°lido con $categories categor√≠as"
    success "Total de paquetes: $total_packages ($pacman_packages pacman + $aur_packages AUR)"
    
    # Verificar si hay paquetes sin campo optional (no cr√≠tico)
    local missing_optional=$(./json_manager.sh validate 2>&1 | grep -c "sin campo 'optional'" || echo "0")
    if [[ $missing_optional -gt 0 ]]; then
        warning "$missing_optional paquetes sin campo 'optional' (no cr√≠tico)"
    else
        success "Todos los paquetes tienen campos requeridos"
    fi
    
    echo
    return 0
}

check_dependencies() {
    log "üîß Verificando dependencias cr√≠ticas..."
    
    local deps=("jq" "curl" "git" "stow" "pacman")
    local missing=()
    
    for dep in "${deps[@]}"; do
        if command -v "$dep" >/dev/null 2>&1; then
            success "$dep disponible"
        else
            error "$dep no encontrado"
            missing+=("$dep")
        fi
    done
    
    if [[ ${#missing[@]} -gt 0 ]]; then
        warning "Dependencias faltantes: ${missing[*]}"
        log "El system_diagnostic.sh deber√≠a instalar estas autom√°ticamente"
    fi
    
    echo
    return [[ ${#missing[@]} -eq 0 ]]
}

test_installation_modes() {
    log "üéØ Probando los 4 modos de instalaci√≥n..."
    
    local modes=(
        "1:MODO COMPLETO"
        "2:MODO CATEGOR√çAS"
        "3:MODO SELECTIVO"
        "4:MODO REQUERIDOS"
    )
    
    for mode_info in "${modes[@]}"; do
        local mode_num="${mode_info%%:*}"
        local mode_name="${mode_info#*:}"
        
        log "Probando modo $mode_num..."
        
        # Simular selecci√≥n y cancelaci√≥n inmediata
        if echo -e "${mode_num}\nn" | timeout 8 ./full_installer_v2.sh 2>/dev/null | grep -q "$mode_name"; then
            success "Modo $mode_num funcionando - $mode_name"
        else
            warning "Modo $mode_num podr√≠a tener problemas"
        fi
    done
    
    echo
}

check_directory_structure() {
    log "üìÅ Verificando estructura de directorios..."
    
    # Directorios principales
    if [[ -d "Additional" ]]; then
        local additional_count=$(find Additional -name "*.sh" | wc -l)
        success "Directorio Additional/ con $additional_count scripts"
    else
        warning "Directorio Additional/ no encontrado"
    fi
    
    # Verificar que estamos en la ra√≠z del proyecto
    if [[ -d "../Config" ]] && [[ -d "../Resources" ]]; then
        success "Estructura de dotfiles correcta"
    else
        warning "Estructura de directorios podr√≠a estar incorrecta"
        log "Aseg√∫rate de estar en el directorio Scripts/"
    fi
    
    echo
}

show_final_summary() {
    log "üìä RESUMEN DEL SISTEMA"
    echo
    
    echo "‚úÖ SISTEMA LISTO PARA INSTALACI√ìN:"
    echo "   ‚Ä¢ Scripts principales: 5/5 ‚úì"
    echo "   ‚Ä¢ JSON v√°lido: ‚úì"
    echo "   ‚Ä¢ Dependencias: ‚úì"
    echo "   ‚Ä¢ 4 modos de instalaci√≥n: ‚úì"
    echo "   ‚Ä¢ Scripts adicionales: ‚úì"
    echo
    
    echo "üéØ OPCIONES DE INSTALACI√ìN DISPONIBLES:"
    echo "   1Ô∏è‚É£  COMPLETA     - Instala todos los 133 paquetes autom√°ticamente"
    echo "   2Ô∏è‚É£  CATEGOR√çAS   - Selecciona categor√≠as espec√≠ficas"
    echo "   3Ô∏è‚É£  SELECTIVA    - Elige cada paquete individualmente"
    echo "   4Ô∏è‚É£  OBLIGATORIOS - Solo paquetes esenciales (83 paquetes)"
    echo
    
    echo "üöÄ PARA INSTALAR:"
    echo "   ./full_installer_v2.sh"
    echo
    
    echo "üîç PARA DIAGN√ìSTICO:"
    echo "   ./system_diagnostic.sh"
    echo
    
    echo "üìä PARA ESTAD√çSTICAS:"
    echo "   ./json_manager.sh stats"
    echo
}

run_diagnostic_test() {
    log "üî¨ Ejecutando diagn√≥stico completo..."
    
    if ./system_diagnostic.sh auto >/dev/null 2>&1; then
        success "Diagn√≥stico autom√°tico: PASADO"
    else
        warning "Diagn√≥stico autom√°tico: FALL√ì (revisar manualmente)"
    fi
    
    echo
}

main() {
    show_banner
    
    local all_checks_passed=true
    
    if ! check_all_scripts; then
        all_checks_passed=false
    fi
    
    if ! check_json_integrity; then
        all_checks_passed=false
    fi
    
    if ! check_dependencies; then
        all_checks_passed=false
    fi
    
    check_directory_structure
    test_installation_modes
    run_diagnostic_test
    
    if [[ "$all_checks_passed" == "true" ]]; then
        success "üéâ ¬°SISTEMA COMPLETAMENTE LISTO PARA INSTALACI√ìN!"
        echo
        show_final_summary
        
        echo "üí° RECOMENDACI√ìN:"
        echo "   Usa la opci√≥n 3 (SELECTIVA) para tu primera instalaci√≥n"
        echo "   para tener control total sobre qu√© se instala."
        echo
        
        return 0
    else
        error "‚ùå Se encontraron problemas. Revisa el output anterior."
        echo
        return 1
    fi
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
