#!/bin/bash

# Test de iteraci√≥n espec√≠fico para identificar problemas

set -euo pipefail

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly PACKAGES_JSON="$SCRIPT_DIR/packages.json"

# Colores
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m'

echo -e "${BLUE}üîç TEST DE ITERACI√ìN DE PAQUETES${NC}"
echo "Verificando c√≥mo se procesan los paquetes del JSON..."
echo

# Test 1: Verificar estructura JSON
echo -e "${YELLOW}1. Verificando estructura JSON...${NC}"
if [[ ! -f "$PACKAGES_JSON" ]]; then
    echo -e "${RED}‚ùå packages.json no encontrado${NC}"
    exit 1
fi

if ! jq empty "$PACKAGES_JSON" 2>/dev/null; then
    echo -e "${RED}‚ùå packages.json tiene errores de sintaxis${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ JSON v√°lido${NC}"

# Test 2: Contar categor√≠as y paquetes
echo -e "${YELLOW}2. Contando elementos...${NC}"
category_count=$(jq '.categories | length' "$PACKAGES_JSON")
total_packages=$(jq '[.categories[].packages[]] | length' "$PACKAGES_JSON")

echo -e "   üìÅ Categor√≠as: $category_count"
echo -e "   üì¶ Total paquetes: $total_packages"

# Test 3: Verificar primera categor√≠a como ejemplo
echo -e "${YELLOW}3. Analizando primera categor√≠a...${NC}"
first_category=$(jq -r '.categories[0].id' "$PACKAGES_JSON")
first_category_packages=$(jq '.categories[0].packages | length' "$PACKAGES_JSON")

echo -e "   üìÇ Primera categor√≠a: $first_category"
echo -e "   üì¶ Paquetes en primera categor√≠a: $first_category_packages"

# Test 4: Iterar sobre primeros 5 paquetes de la primera categor√≠a
echo -e "${YELLOW}4. Iterando sobre primeros paquetes...${NC}"

jq -r '.categories[0].packages[0:5][] | "\(.name)|\(.repo)|\(.optional // false)"' "$PACKAGES_JSON" | while IFS='|' read -r name repo optional; do
    echo -e "   üîç Paquete: ${name}"
    echo -e "      ‚îî‚îÄ Repo: ${repo}"
    echo -e "      ‚îî‚îÄ Opcional: ${optional}"
    
    # Verificar si est√° instalado
    if pacman -Qi "$name" >/dev/null 2>&1; then
        echo -e "      ‚îî‚îÄ Estado: ${GREEN}‚úÖ Instalado${NC}"
    else
        echo -e "      ‚îî‚îÄ Estado: ${YELLOW}‚è≥ No instalado${NC}"
    fi
    echo
done

# Test 5: Verificar comandos de instalaci√≥n
echo -e "${YELLOW}5. Verificando disponibilidad de herramientas...${NC}"

if command -v pacman >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ pacman disponible${NC}"
else
    echo -e "${RED}‚ùå pacman no disponible${NC}"
fi

if command -v yay >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ yay disponible${NC}"
    yay_version=$(yay --version | head -n1)
    echo -e "   ‚îî‚îÄ Versi√≥n: $yay_version"
else
    echo -e "${YELLOW}‚ö†Ô∏è  yay no disponible${NC}"
fi

# Test 6: Verificar un paquete espec√≠fico problem√°tico
echo -e "${YELLOW}6. Verificando paquetes espec√≠ficos...${NC}"

# Buscar algunos paquetes que sabemos pueden ser problem√°ticos
test_packages=("amberol" "rmpc-bin" "extension-manager")

for test_pkg in "${test_packages[@]}"; do
    echo -e "   üîç Verificando: $test_pkg"
    
    # Verificar si est√° en el JSON
    if jq -e --arg pkg "$test_pkg" '.categories[].packages[] | select(.name == $pkg)' "$PACKAGES_JSON" >/dev/null; then
        echo -e "      ‚îî‚îÄ ${GREEN}‚úÖ Encontrado en JSON${NC}"
        
        # Obtener info del paquete
        pkg_info=$(jq --arg pkg "$test_pkg" '.categories[].packages[] | select(.name == $pkg)' "$PACKAGES_JSON")
        repo=$(echo "$pkg_info" | jq -r '.repo')
        
        echo -e "      ‚îî‚îÄ Repo: $repo"
        
        # Verificar disponibilidad
        if [[ "$repo" == "pacman" ]]; then
            if pacman -Si "$test_pkg" >/dev/null 2>&1; then
                echo -e "      ‚îî‚îÄ ${GREEN}‚úÖ Disponible en pacman${NC}"
            else
                echo -e "      ‚îî‚îÄ ${YELLOW}‚ö†Ô∏è  No disponible en pacman${NC}"
            fi
        elif [[ "$repo" == "aur" ]]; then
            if command -v yay >/dev/null 2>&1 && yay -Si "$test_pkg" >/dev/null 2>&1; then
                echo -e "      ‚îî‚îÄ ${GREEN}‚úÖ Disponible en AUR${NC}"
            else
                echo -e "      ‚îî‚îÄ ${YELLOW}‚ö†Ô∏è  No disponible en AUR${NC}"
            fi
        fi
        
        # Verificar si est√° instalado
        if pacman -Qi "$test_pkg" >/dev/null 2>&1; then
            echo -e "      ‚îî‚îÄ ${GREEN}‚úÖ Ya instalado${NC}"
        else
            echo -e "      ‚îî‚îÄ ${YELLOW}‚è≥ No instalado${NC}"
        fi
    else
        echo -e "      ‚îî‚îÄ ${RED}‚ùå No encontrado en JSON${NC}"
    fi
    echo
done

# Test 7: Simular problema de instalaci√≥n
echo -e "${YELLOW}7. Simulando comando de instalaci√≥n...${NC}"

test_package="stow"  # Paquete que sabemos que existe
echo -e "   üß™ Simulando instalaci√≥n de: $test_package"

# Comando exacto que usa el instalador
echo -e "   üìù Comando pacman: sudo pacman -S --noconfirm $test_package"

# Ver si falla por alguna raz√≥n
if sudo pacman -S --noconfirm --needed "$test_package" >/dev/null 2>&1; then
    echo -e "      ‚îî‚îÄ ${GREEN}‚úÖ Comando pacman exitoso${NC}"
else
    echo -e "      ‚îî‚îÄ ${YELLOW}‚ö†Ô∏è  Comando pacman fall√≥${NC}"
fi

# Test con yay
if command -v yay >/dev/null 2>&1; then
    echo -e "   üìù Comando yay: yay -S --noconfirm $test_package"
    if yay -S --noconfirm --needed "$test_package" >/dev/null 2>&1; then
        echo -e "      ‚îî‚îÄ ${GREEN}‚úÖ Comando yay exitoso${NC}"
    else
        echo -e "      ‚îî‚îÄ ${YELLOW}‚ö†Ô∏è  Comando yay fall√≥${NC}"
    fi
fi

echo
echo -e "${BLUE}üéØ CONCLUSIONES DEL TEST:${NC}"
echo -e "   ‚Ä¢ JSON estructura: ${GREEN}OK${NC}"
echo -e "   ‚Ä¢ Iteraci√≥n de paquetes: ${GREEN}OK${NC}"
echo -e "   ‚Ä¢ Herramientas disponibles: Verificar arriba"
echo -e "   ‚Ä¢ Comandos de instalaci√≥n: Verificar arriba"
echo
echo -e "${YELLOW}üí° Si ves problemas arriba, ese es el punto de falla del instalador${NC}"
