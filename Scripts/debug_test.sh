#!/bin/bash

# ==============================================================================
# DEBUG TEST - Verificaci√≥n r√°pida del sistema JSON
# ==============================================================================

set -euo pipefail

# Configuraciones
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly PACKAGES_JSON="$SCRIPT_DIR/packages.json"

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${BLUE}[DEBUG]${NC} $*"
}

success() {
    echo -e "${GREEN}[‚úì]${NC} $*"
}

error() {
    echo -e "${RED}[‚úó]${NC} $*"
}

warning() {
    echo -e "${YELLOW}[!]${NC} $*"
}

echo "üîç DEBUG TEST - Verificaci√≥n del sistema JSON"
echo "=============================================="
echo

# 1. Verificar archivo JSON existe
log "1. Verificando existencia del archivo JSON..."
if [[ -f "$PACKAGES_JSON" ]]; then
    success "Archivo existe: $PACKAGES_JSON"
else
    error "Archivo NO existe: $PACKAGES_JSON"
    exit 1
fi
echo

# 2. Verificar que jq est√° disponible
log "2. Verificando jq..."
if command -v jq >/dev/null 2>&1; then
    success "jq est√° disponible: $(jq --version)"
else
    error "jq NO est√° disponible"
    exit 1
fi
echo

# 3. Verificar validez del JSON
log "3. Verificando validez del JSON..."
if jq empty "$PACKAGES_JSON" 2>/dev/null; then
    success "JSON es v√°lido"
else
    error "JSON NO es v√°lido"
    jq . "$PACKAGES_JSON" 2>&1 | head -10
    exit 1
fi
echo

# 4. Verificar estructura del JSON
log "4. Verificando estructura del JSON..."
echo "   üìä Estructura general:"
echo "      - Archivo tama√±o: $(wc -c < "$PACKAGES_JSON") bytes"
echo "      - L√≠neas: $(wc -l < "$PACKAGES_JSON")"

# Verificar que tiene la estructura esperada
if jq -e '.categories' "$PACKAGES_JSON" >/dev/null 2>&1; then
    total_categories=$(jq '.categories | length' "$PACKAGES_JSON")
    success "Estructura v√°lida - Categor√≠as encontradas: $total_categories"
else
    error "Estructura inv√°lida - No se encontr√≥ '.categories'"
    exit 1
fi
echo

# 5. Test del comando exacto que falla
log "5. Testando el comando exacto que falla en el script..."
echo "   üìù Comando: jq -r '.categories[].id' \"\$PACKAGES_JSON\""
echo

categories=()
count=0
while IFS= read -r category_id; do
    if [[ -n "$category_id" ]] && [[ "$category_id" != "null" ]]; then
        categories+=("$category_id")
        echo "      ‚úì Categor√≠a $((++count)): $category_id"
    else
        warning "L√≠nea vac√≠a o null encontrada: '$category_id'"
    fi
done < <(jq -r '.categories[].id' "$PACKAGES_JSON" 2>/dev/null)

echo
if [[ ${#categories[@]} -eq 0 ]]; then
    error "‚ùå PROBLEMA REPRODUCIDO: No se pudieron leer categor√≠as"
    echo
    log "Diagn√≥stico adicional:"
    echo "   üîç Comando directo:"
    jq -r '.categories[].id' "$PACKAGES_JSON" 2>&1 | head -10
    echo
    echo "   üîç Estructura de categor√≠as:"
    jq '.categories[0:3]' "$PACKAGES_JSON" 2>/dev/null || echo "Error al leer categor√≠as"
else
    success "‚úÖ √âXITO: Se leyeron ${#categories[@]} categor√≠as correctamente"
    echo "   üìã Categor√≠as encontradas: ${categories[*]}"
fi
echo

# 6. Test adicional - verificar permisos
log "6. Verificando permisos del archivo..."
ls -la "$PACKAGES_JSON"
echo

# 7. Test de diferentes m√©todos de lectura
log "7. Probando m√©todos alternativos de lectura..."

echo "   üìù M√©todo 1 - jq directo:"
if jq -r '.categories[].id' "$PACKAGES_JSON" | head -5; then
    success "M√©todo 1 funciona"
else
    error "M√©todo 1 falla"
fi
echo

echo "   üìù M√©todo 2 - con pipe expl√≠cito:"
if jq -r '.categories[] | .id' "$PACKAGES_JSON" | head -5; then
    success "M√©todo 2 funciona"
else
    error "M√©todo 2 falla"
fi
echo

echo "   üìù M√©todo 3 - verificando primera categor√≠a:"
if jq -r '.categories[0].id' "$PACKAGES_JSON"; then
    success "M√©todo 3 funciona"
else
    error "M√©todo 3 falla"
fi
echo

# 8. Informaci√≥n del sistema
log "8. Informaci√≥n del sistema:"
echo "   üñ•Ô∏è  Sistema: $(uname -a)"
echo "   üè† Usuario: $(whoami)"
echo "   üìÅ PWD: $(pwd)"
echo "   üîß Shell: $SHELL"
echo "   üì¶ jq versi√≥n: $(jq --version 2>/dev/null || echo 'N/A')"
echo

echo "üèÅ DEBUG TEST COMPLETADO"
echo "========================"
