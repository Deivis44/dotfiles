#!/bin/bash

# ==============================================================================
# DOTFILES FULL INSTALLER v2.0 - JSON NATIVE
# Sistema completo unificado - Base de datos JSON √∫nica
# ==============================================================================

set -euo pipefail

# Configuraciones globales
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly DOTFILES_DIR="$(dirname "$SCRIPT_DIR")"
readonly PACKAGES_JSON="$SCRIPT_DIR/packages.json"
readonly ADDITIONAL_DIR="$SCRIPT_DIR/Additional"
readonly LOG_DIR="$HOME/.local/share/dotfiles/logs"
readonly CONFIG_DIR="$HOME/.config/dotfiles"

# Crear directorios necesarios
mkdir -p "$LOG_DIR" "$CONFIG_DIR"

# Logging con timestamp
readonly LOG_FILE="$LOG_DIR/full_installation_$(date +%Y%m%d_%H%M%S).log"
exec 1> >(tee -a "$LOG_FILE")
exec 2> >(tee -a "$LOG_FILE" >&2)

# Contadores globales para resumen
TOTAL_INSTALLED=0
TOTAL_FAILED=0
TOTAL_SKIPPED=0

# ==============================================================================
# FUNCIONES DE UTILIDAD
# ==============================================================================

log() {
    local level="$1"
    shift
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] [$level] $*" | tee -a "$LOG_FILE"
}

info() { log "INFO" "$@"; }
success() { log "SUCCESS" "\033[32m$*\033[0m"; }
warning() { log "WARNING" "\033[33m$*\033[0m"; }
error() { log "ERROR" "\033[31m$*\033[0m"; }

show_banner() {
    cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                   üöÄ DOTFILES FULL INSTALLER v2.0                   ‚ïë
‚ïë                     Sistema Completo de Dotfiles                     ‚ïë
‚ïë                        Arch Linux + Hyprland                         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
}

show_section() {
    local section="$1"
    echo
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "üéØ $section"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
}

ask_yes_no() {
    local prompt="$1"
    local default="${2:-n}"
    local response
    
    while true; do
        read -p "$prompt [y/N]: " response
        response="${response:-$default}"
        case "${response,,}" in
            y|yes|s|si) return 0 ;;
            n|no) return 1 ;;
            *) echo "Por favor, responde con y/n (yes/no)" ;;
        esac
    done
}

check_system() {
    info "üîç Verificando sistema..."
    
    # Verificar que estamos en Arch Linux
    if [[ ! -f /etc/arch-release ]]; then
        error "Este script est√° dise√±ado para Arch Linux"
        exit 1
    fi
    
    # Verificar conexi√≥n a internet
    if ! ping -c 1 8.8.8.8 >/dev/null 2>&1; then
        error "No hay conexi√≥n a internet"
        exit 1
    fi
    
    # Verificar que git est√° instalado
    if ! command -v git >/dev/null 2>&1; then
        info "Instalando git..."
        sudo pacman -S --needed --noconfirm git
    fi
    
    success "‚úÖ Sistema verificado"
}

# ==============================================================================
# M√ìDULOS DE INSTALACI√ìN
# ==============================================================================

install_hyprland_custom() {
    show_section "Instalaci√≥n de Hyprland Personalizado (end-4)"
    
    if ask_yes_no "¬øInstalar configuraci√≥n personalizada de Hyprland de end-4?"; then
        info "üåü Instalando configuraci√≥n de Hyprland..."
        
        # Crear backup de configuraci√≥n existente si existe
        if [[ -d "$HOME/.config/hypr" ]]; then
            warning "Configuraci√≥n de Hyprland existente detectada"
            if ask_yes_no "¬øCrear backup de la configuraci√≥n actual?"; then
                mv "$HOME/.config/hypr" "$HOME/.config/hypr.backup.$(date +%Y%m%d_%H%M%S)"
                info "‚úÖ Backup creado"
            fi
        fi
        
        # Instalar configuraci√≥n de end-4
        bash <(curl -s "https://end-4.github.io/dots-hyprland-wiki/setup.sh")
        
        success "‚úÖ Configuraci√≥n de Hyprland instalada"
    else
        info "‚è≠Ô∏è  Instalaci√≥n de Hyprland omitida"
    fi
}

install_packages_json() {
    show_section "Instalaci√≥n de Paquetes (Sistema JSON v2.0)"
    
    if ask_yes_no "¬øEjecutar instalaci√≥n de paquetes con el nuevo sistema JSON?"; then
        local package_installer="$SCRIPT_DIR/package_installer.sh"
        
        if [[ -f "$package_installer" ]]; then
            info "üöÄ Ejecutando instalador de paquetes v2.0..."
            bash "$package_installer"
            success "‚úÖ Instalaci√≥n de paquetes completada"
        else
            warning "Instalador v2.0 no encontrado, usando sistema legacy..."
            install_packages_legacy
        fi
    else
        info "‚è≠Ô∏è  Instalaci√≥n de paquetes omitida"
    fi
}

install_packages_legacy() {
    show_section "Instalaci√≥n de Paquetes (Sistema Legacy)"
    
    local legacy_installer="$SCRIPT_DIR/install-packages.sh"
    
    if [[ -f "$legacy_installer" ]]; then
        info "üîÑ Ejecutando instalador legacy..."
        bash "$legacy_installer"
        success "‚úÖ Instalaci√≥n legacy completada"
    else
        error "‚ùå No se encontr√≥ ning√∫n instalador de paquetes"
    fi
}

install_extra_packages() {
    show_section "Instalaci√≥n de Paquetes Adicionales"
    
    if ask_yes_no "¬øInstalar paquetes adicionales (TPM, NvChad, Starship, etc.)?"; then
        local extra_installer="$SCRIPT_DIR/install_extra_packs.sh"
        
        if [[ -f "$extra_installer" ]]; then
            info "üì¶ Ejecutando instalador de paquetes adicionales..."
            bash "$extra_installer"
            success "‚úÖ Paquetes adicionales instalados"
        else
            warning "Script de paquetes adicionales no encontrado"
        fi
    else
        info "‚è≠Ô∏è  Paquetes adicionales omitidos"
    fi
}

setup_dotfiles_links() {
    show_section "Configuraci√≥n de Enlaces Simb√≥licos"
    
    if ask_yes_no "¬øConfigurar enlaces simb√≥licos para dotfiles?"; then
        local stow_script="$SCRIPT_DIR/stow-links.sh"
        
        if [[ -f "$stow_script" ]]; then
            info "üîó Configurando enlaces simb√≥licos..."
            bash "$stow_script"
            success "‚úÖ Enlaces simb√≥licos configurados"
        else
            warning "Script de stow no encontrado"
            
            # Fallback: configuraci√≥n manual b√°sica
            if command -v stow >/dev/null 2>&1; then
                info "üìÅ Configurando enlaces b√°sicos con stow..."
                cd "$DOTFILES_DIR"
                
                local configs=("kitty" "nvim" "tmux" "zsh" "hyprland")
                for config in "${configs[@]}"; do
                    if [[ -d "Config/$config" ]]; then
                        info "üîó Enlazando $config..."
                        stow -t "$HOME" "Config/$config" 2>/dev/null || true
                    fi
                done
                
                success "‚úÖ Enlaces b√°sicos configurados"
            else
                warning "stow no est√° disponible"
            fi
        fi
    else
        info "‚è≠Ô∏è  Configuraci√≥n de enlaces omitida"
    fi
}

run_additional_scripts() {
    show_section "Scripts Adicionales"
    
    if [[ ! -d "$ADDITIONAL_DIR" ]]; then
        warning "Directorio Additional no encontrado"
        return 0
    fi
    
    # Listar scripts disponibles
    local scripts=()
    while IFS= read -r -d '' script; do
        scripts+=("$script")
    done < <(find "$ADDITIONAL_DIR" -name "*.sh" -type f -print0)
    
    if [[ ${#scripts[@]} -eq 0 ]]; then
        info "No se encontraron scripts adicionales"
        return 0
    fi
    
    info "Scripts adicionales disponibles:"
    for i in "${!scripts[@]}"; do
        local script_name
        script_name=$(basename "${scripts[$i]}")
        echo "  $((i+1)). $script_name"
    done
    echo
    
    if ask_yes_no "¬øEjecutar scripts adicionales uno por uno?"; then
        for script in "${scripts[@]}"; do
            local script_name
            script_name=$(basename "$script")
            
            if ask_yes_no "¬øEjecutar $script_name?"; then
                info "üîß Ejecutando $script_name..."
                
                # Hacer ejecutable si no lo es
                chmod +x "$script"
                
                # Ejecutar script
                if bash "$script"; then
                    success "‚úÖ $script_name completado"
                else
                    warning "‚ö†Ô∏è  $script_name termin√≥ con errores"
                fi
            else
                info "‚è≠Ô∏è  $script_name omitido"
            fi
        done
    else
        # Ofrecer ejecutar todos
        if ask_yes_no "¬øEjecutar todos los scripts adicionales?"; then
            for script in "${scripts[@]}"; do
                local script_name
                script_name=$(basename "$script")
                
                info "üîß Ejecutando $script_name..."
                chmod +x "$script"
                
                if bash "$script"; then
                    success "‚úÖ $script_name completado"
                else
                    warning "‚ö†Ô∏è  $script_name termin√≥ con errores"
                fi
            done
        else
            info "‚è≠Ô∏è  Scripts adicionales omitidos"
        fi
    fi
}

optimize_system() {
    show_section "Optimizaci√≥n del Sistema"
    
    if ask_yes_no "¬øEjecutar optimizaciones del sistema?"; then
        info "üöÄ Optimizando sistema..."
        
        # Limpiar cache de pacman
        info "üßπ Limpiando cache de pacman..."
        sudo pacman -Sc --noconfirm
        
        # Actualizar base de datos de archivos
        info "üìÑ Actualizando base de datos de archivos..."
        sudo updatedb 2>/dev/null || true
        
        # Actualizar cache de fuentes
        if command -v fc-cache >/dev/null 2>&1; then
            info "üî§ Actualizando cache de fuentes..."
            fc-cache -fv >/dev/null 2>&1
        fi
        
        # Generar configuraci√≥n de GRUB si existe
        if [[ -f /boot/grub/grub.cfg ]] && command -v grub-mkconfig >/dev/null 2>&1; then
            if ask_yes_no "¬øRegenerar configuraci√≥n de GRUB?"; then
                info "üéõÔ∏è  Regenerando GRUB..."
                sudo grub-mkconfig -o /boot/grub/grub.cfg
            fi
        fi
        
        success "‚úÖ Optimizaci√≥n completada"
    else
        info "‚è≠Ô∏è  Optimizaci√≥n omitida"
    fi
}

# ==============================================================================
# RESUMEN Y REPORTES
# ==============================================================================

show_installation_summary() {
    show_section "Resumen de Instalaci√≥n"
    
    echo "üìã Informaci√≥n de la instalaci√≥n:"
    echo "   üìÖ Fecha: $(date)"
    echo "   üë§ Usuario: $USER"
    echo "   üñ•Ô∏è  Sistema: $(uname -a)"
    echo "   üìÇ Dotfiles: $DOTFILES_DIR"
    echo "   üìÑ Log: $LOG_FILE"
    echo
    
    # Verificar componentes instalados
    echo "üîç Estado de componentes:"
    
    # Verificar Hyprland
    if command -v hyprctl >/dev/null 2>&1; then
        echo "   ‚úÖ Hyprland instalado"
    else
        echo "   ‚ùå Hyprland no detectado"
    fi
    
    # Verificar algunos paquetes clave
    local key_packages=("kitty" "nvim" "tmux" "git" "stow")
    for pkg in "${key_packages[@]}"; do
        if command -v "$pkg" >/dev/null 2>&1; then
            echo "   ‚úÖ $pkg disponible"
        else
            echo "   ‚ùå $pkg no disponible"
        fi
    done
    
    # Verificar configuraciones
    local configs=("$HOME/.config/kitty" "$HOME/.config/nvim" "$HOME/.config/tmux")
    for config in "${configs[@]}"; do
        local config_name
        config_name=$(basename "$config")
        if [[ -d "$config" ]]; then
            echo "   ‚úÖ Configuraci√≥n $config_name enlazada"
        else
            echo "   ‚ùå Configuraci√≥n $config_name no enlazada"
        fi
    done
}

create_post_install_guide() {
    local guide_file="$HOME/dotfiles_post_install.md"
    
    cat > "$guide_file" << 'EOF'
# üéâ Gu√≠a Post-Instalaci√≥n de Dotfiles

## ‚úÖ Instalaci√≥n Completada

¬°Felicidades! Tu sistema de dotfiles ha sido instalado exitosamente.

## üîß Pr√≥ximos Pasos

### 1. Configuraci√≥n de Terminal
- Reinicia tu terminal para aplicar la configuraci√≥n de zsh
- Verifica que Starship est√© funcionando
- Prueba los alias configurados

### 2. Configuraci√≥n de Neovim
- Abre neovim: `nvim`
- Si instalaste NvChad, espera a que termine la configuraci√≥n inicial
- Instala plugins con `:PackerSync` o `:Lazy sync`

### 3. Configuraci√≥n de Tmux
- Inicia tmux: `tmux`
- Instala plugins con `Prefix + I` (Ctrl+B + I por defecto)

### 4. Configuraci√≥n de Hyprland (si est√° instalado)
- Cierra sesi√≥n y selecciona Hyprland en el gestor de sesiones
- Familiar√≠zate con los atajos de teclado configurados

## üé® Personalizaci√≥n

### Temas y Fuentes
- Las fuentes Nerd est√°n instaladas
- Configura tu terminal para usar CaskaydiaCove Nerd Font

### Aplicaciones Recomendadas
- **Terminal**: Kitty (ya configurado)
- **Editor**: Neovim con NvChad
- **Navegador**: Chromium/Brave (instalados)
- **Reproductor**: MPV con MPD

## üìö Documentaci√≥n

### Comandos √ötiles
```bash
# Gesti√≥n de paquetes
./json_manager.sh stats              # Ver estad√≠sticas
./json_manager.sh validate           # Validar configuraci√≥n
./package_installer.sh               # Reinstalar paquetes

# Dotfiles
cd ~/dotfiles
git pull                            # Actualizar dotfiles
stow Config/kitty                   # Reenlazar configuraci√≥n
```

### Archivos de Configuraci√≥n
- **Zsh**: `~/.config/zsh/.zshrc`
- **Kitty**: `~/.config/kitty/kitty.conf`
- **Neovim**: `~/.config/nvim/`
- **Tmux**: `~/.config/tmux/tmux.conf`

## üêõ Soluci√≥n de Problemas

Si encuentras problemas:
1. Revisa el log: `$LOG_FILE`
2. Valida el JSON: `./json_manager.sh validate`
3. Reinstala paquetes espec√≠ficos: `./package_installer.sh`

## üìû Soporte

- Documentaci√≥n: Check README.md en el repositorio
- Issues: Abre un issue en GitHub si encuentras problemas

---
*Generado autom√°ticamente por Dotfiles Full Installer v2.0*
EOF

    success "üìñ Gu√≠a post-instalaci√≥n creada en: $guide_file"
}

# ==============================================================================
# FUNCI√ìN PRINCIPAL
# ==============================================================================

main() {
    show_banner
    
    info "üöÄ Iniciando instalaci√≥n completa de dotfiles..."
    echo
    
    # Verificaciones iniciales
    check_system
    
    # Asegurar permisos ejecutables
    info "üîí Configurando permisos..."
    find "$SCRIPT_DIR" -name "*.sh" -type f -exec chmod +x {} \;
    
    # Men√∫ principal de instalaci√≥n
    info "üìã M√≥dulos de instalaci√≥n disponibles:"
    echo
    echo "Este instalador te guiar√° a trav√©s de varios m√≥dulos:"
    echo "  1. üåü Hyprland personalizado (end-4)"
    echo "  2. üì¶ Paquetes del sistema (JSON v2.0)"
    echo "  3. üîß Paquetes adicionales (TPM, NvChad, etc.)"
    echo "  4. üîó Enlaces simb√≥licos de configuraci√≥n"
    echo "  5. ‚öôÔ∏è  Scripts adicionales"
    echo "  6. üöÄ Optimizaciones del sistema"
    echo
    
    if ! ask_yes_no "¬øContinuar con la instalaci√≥n?"; then
        info "Instalaci√≥n cancelada por el usuario"
        exit 0
    fi
    
    # Ejecutar m√≥dulos
    install_hyprland_custom
    install_packages_json
    install_extra_packages  
    setup_dotfiles_links
    run_additional_scripts
    optimize_system
    
    # Resumen final
    show_installation_summary
    create_post_install_guide
    
    echo
    success "üéâ ¬°Instalaci√≥n completa terminada exitosamente!"
    echo
    info "üìñ Revisa la gu√≠a post-instalaci√≥n en: ~/dotfiles_post_install.md"
    info "üìÑ Log completo disponible en: $LOG_FILE"
    echo
    warning "üí° Se recomienda reiniciar el sistema para aplicar todos los cambios"
    
    if ask_yes_no "¬øReiniciar el sistema ahora?"; then
        sudo reboot
    fi
}

# Manejar se√±ales para limpieza
trap 'error "Instalaci√≥n interrumpida"; exit 130' INT TERM

# Ejecutar si es llamado directamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
